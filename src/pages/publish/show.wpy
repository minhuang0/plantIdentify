<template>
    <view class="content">
        <view class="image-view">
            <image src="{{image}}" class="image" mode="aspectFit"></image>
            <view class="shadow">
                拍摄实物图
            </view>
        </view>
        <view class="list">
            <block wx:for="{{formatResult}}" wx:key="{{index}}">
                <view class="item">
                    <view class="name">{{item.name}}</view>
                    <view>{{item.score}}</view>
                </view>
            </block>
        </view>
        <image src="{{loadImage}}" bindload="loadimage" class="load-image" mode="aspectFit"></image>
        <canvas canvas-id="canvas" style="width: {{canvas.width}}px; height: {{canvas.height}}px;" class="canvas"></canvas>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import { uploadFile, getFetch } from '@/modules/common/fetch'

    export default class Index extends wepy.page {
        config = {
            navigationBarTitleText: '花瓣'
        }
        data = {
            image: '',
            result: [],
            shareId: '',
            loadImage: '', // canvas切图用的image
            isFromAlbum: false, // 是否来源于相册
            canvas: {
                width: 375,
                height: 600
            },
            isFromShare: false
        }
        methods = {
        }
        computed = {
            formatResult () {
                return this.result.map(i => {
                    return {
                        score: parseInt(i.score * 100) + '%',
                        name: i.name
                    }
                })
            }
        }
        onShareAppMessage () {
            return {
                title: `${(this.formatResult[0] && this.formatResult[0].name) || ''} (${(this.formatResult[0] && this.formatResult[0].score)})`,
                path: `pages/publish/index?shareId=${this.shareId}`,
                imageUrl: this.shareImage
            }
        }
        error (e) {
            wepy.hideLoading()
            wepy.showToast({
                title: '网络异常',
                icon: 'none',
                duration: 2000
            })
        }
        async compressImage () {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    wepy.canvasToTempFilePath({
                        canvasId: 'canvas',
                        success (res) {
                            resolve(res.tempFilePath)
                        },
                        fail (e) {
                            reject(e)
                        }
                    })
                }, 1000)
            })
        }
        parseLeafSnapResponse (rsp = '{}') {
            const res = JSON.parse(rsp)
            const result = res.res && res.res.result
            this.shareId = res.id
            this.result = Array.isArray(result) ? result : result ? [result] : []
            wepy.hideLoading()
            wepy.showShareMenu({
                withShareTicket: true
            })
            this.$apply()
        }
        async loadimage (e) {
            if (this.isFromShare) {
                return
            }
            // 从相册来的重新绘制canvas宽高
            // if (this.isFromAlbum) {
            //     this.canvas.width = 375
            //     this.canvas.height = e.detail.height / e.detail.width * 375
            // }
            const ctx = wepy.createCanvasContext('canvas')
            ctx.drawImage(this.loadImage, 0, 0, 375, e.detail.height / e.detail.width * 375)
            // if (this.isFromAlbum) {
            //     ctx.drawImage(this.loadImage, 0, 0, 375, e.detail.height / e.detail.width * 375)
            // } else {
            //     ctx.drawImage(this.loadImage, 87, 90, 200, 200, 0, 0, 200, 200)
            // }
            ctx.draw()
            const minImage = await this.compressImage()
            this.image = minImage
            this.$apply()
            uploadFile('/leafSnap', minImage).then(res => this.parseLeafSnapResponse(res)).catch(e => {
                this.error(e)
            })
        }
        async onLoad (options) {
            wepy.getSystemInfo({
                success: function(res) {
                    console.log(res.pixelRatio)
                }
            })
            if (options.shareId) {
                return this.getShareDate(options.shareId)
            }
            wepy.showLoading({ title: '识别中', mask: true })
            this.isFromAlbum = options.isFromAlbum !== 'false'
            this.$apply()
            this.loadImage = options.image ? decodeURIComponent(options.image) : 'https://pro.modao.cc/uploads3/images/1935/19351230/raw_1524551943.jpeg'
            this.$apply()
        }
        async getShareDate (id) {
            this.isFromShare = true
            wepy.showLoading({ title: '数据加载中', mask: true })
            const res = await getFetch(`/shareRes/${id}`, {
                noAjax: true
            })
            const shareRes = res.leafsnapRes || {}
            shareRes.res = JSON.parse(shareRes.res)
            this.image = shareRes.imgUrl
            this.parseLeafSnapResponse(JSON.stringify(shareRes))
        }
    }
</script>

<style lang="scss" scoped>
    .content {
        width: 100%;
        height: 100%;
        font-size: 14px;
    }
    .image-view {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #000;
        width: 100%;
        height: 55%;
        image {
            height: 100%;
            width: inherit;
        }
        .shadow {
            position: absolute;
            bottom: 0;
            height: 60rpx;
            width: 100%;
            text-indent: 60rpx;
            line-height: 60rpx;
            color: #fff;
            background: rgba(0, 0, 0, 0.5);
        }
    }
    .list {
        padding: 20rpx 60rpx;
        .item {
            margin: 25rpx 0;
            padding: 5rpx;
            position: relative;
            display: flex;
            justify-content: space-between;
            .name {
                flex: 1;
            }
            &::after {
                content: "";
                position: absolute;
                background: #f4f4f4;
                width: 100%;
                height: 1px;
                bottom: 0;
                left: 0;
            }
        }
    }
    .canvas {
        position: absolute;
        top: -1000px;
        bottom: -1000px;
    }
    .load-image {
        position: absolute;
        width: 375px;
        height: 600px;
        top: -1000px;
        left: -1000px;
    }
</style>
