<template>
    <view class="content">
        <map wx:if="{{showMap}}" id="map" longitude="{{longitude}}" latitude="{{latitude}}" scale="{{scale}}" controls="{{controls}}" bindcontroltap="controltap" markers="{{markers}}" bindmarkertap="markertap" polyline="{{polyline}}" bindregionchange="regionchange" show-location style="width: 100%; height: 100%;" bindtap="bindtap" bindupdated="bindupdated">
            <cover-view class="start" @tap="start">去识别</cover-view>
            <cover-view class="cover-bg" wx:if="{{cover.show}}" @tap="closeCover">
                <cover-view class="cover">
                    <cover-image class="img" src="{{cover.url}}" />
                    <cover-view class="description">
                        <cover-view class="row">
                            <cover-view class="name">{{cover.name}}</cover-view>
                            <cover-view class="more" data-name="{{cover.name}}" @tap.stop="search">
                                <cover-view>查看百科</cover-view>
                                <cover-view class="iconfont icon icon-enter"></cover-view>
                            </cover-view>
                        </cover-view>
                        <cover-view class="row">{{cover.time}}</cover-view>
                    </cover-view>
                </cover-view>
                <cover-view class="line"></cover-view>
                <cover-image class="cancel" src="../../modules/images/cancle.png" />
            </cover-view>
        </map>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import { getFetch } from '@/modules/common/fetch'
    import { format } from 'date-fns'

    const DEFAULT_ICON_PATH = '../../modules/images/flower.png'
    export default class Index extends wepy.page {
        config = {
            navigationBarTitleText: '花瓣'
        }
        data = {
            mapCtx: '',
            longitude: '',
            latitude: '',
            boundary: '0.05',
            scale: '16',
            showMap: true,
            markers: [{
                iconPath: DEFAULT_ICON_PATH,
                id: 0,
                latitude: 23.099994,
                longitude: 113.324520,
                width: 30,
                height: 30
            }],
            cover: {
                show: false,
                url: DEFAULT_ICON_PATH,
                time: '06-18 20:20',
                name: '非植物'
            },
            listMap: new Map()
        }
        methods = {
            start () {
                const that = this
                wepy.getSetting({
                    success (res) {
                        if (!res.authSetting['scope.userLocation']) {
                            wepy.showModal({
                                title: '是否授权当前位置',
                                content: '需要获取您的地理位置，请确认授权，否则地图功能将无法使用',
                                success (res) {
                                    if (res.cancel) {
                                        console.info('授权失败')
                                    } else if (res.confirm) {
                                        that.showGetLocation()
                                    }
                                }
                            })
                            return
                        }
                        that.goIdentifyPage()
                    }
                })
            },
            bindupdated (e) {
                // console.log('bindupdated')
                // this.cover.show = false
            },
            bindtap (e) {
                this.getPositionAndUpdateMarkets(e)
                this.cover.show = false
            },
            closeCover () {
                this.cover.show = false
            },
            search (e) {
                wepy.navigateTo({
                    url: `../publish/detail?name=${e.currentTarget.dataset.name}`
                })
            }
        }
        showGetLocation () {
            const that = this
            wepy.openSetting({
                success: function (data) {
                    if (data.authSetting['scope.userLocation'] === true) {
                        wepy.showToast({
                            title: '授权成功',
                            icon: 'success',
                            duration: 5000
                        })
                        // 再次授权，调用getLocationt的API
                        that.goIdentifyPage(that)
                    } else {
                        wepy.showToast({
                            title: '授权失败',
                            icon: 'success',
                            duration: 5000
                        })
                    }
                }

            })
        }
        goIdentifyPage () {
            wepy.navigateTo({
                url: `../publish/index`
            })
        }
        async getPositionAndUpdateMarkets (e) {
            // 5-18 scale缩放范围
            const { latitude, longitude, boundary } = await this.getBoundaryAndCenterLatitudeAdnLongitude()
            await this.getList({ latitude, longitude, boundary })
            this.updateMarkers()
        }
        getRegion () {
            return new Promise(resolve => {
                this.mapCtx.getRegion({
                    success (e) {
                        resolve(e)
                    }
                })
            })
        }
        getScale () {
            return new Promise(resolve => {
                this.mapCtx.getScale({
                    success (e) {
                        resolve(e.scale)
                    }
                })
            })
        }
        getLocation () {
            return new Promise((resolve) => {
                wepy.getLocation({
                    type: 'gcj02',
                    success: function(res) {
                        resolve(res)
                    }
                })
            })
        }
        async downloadFile (url) {
            return new Promise(resolve => {
                wepy.downloadFile({
                    url,
                    success: function(res) {
                        // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
                        if (res.statusCode === 200) {
                            // resolve('../../modules/images/flower.png')
                            resolve(res.tempFilePath)
                        }
                        resolve('')
                    }
                })
            })
        }
        async getList ({ longitude, latitude, boundary } = {}) {
            const res = await getFetch(`/mapList?lon=${longitude || this.longitude}&lat=${latitude || this.latitude}&boundary=${boundary || this.boundary}`, {
                noAjax: true
            })
            this.$apply()
            res.map(item => {
                // promiseArr.push(Promise.resolve('../../modules/images/flower.png'))
                // promiseArr.push(this.downloadFile(item.imgUrl))
                ((data) => {
                    this.downloadFile(data.imgUrl).then(url => {
                        const currentData = this.listMap.get(item.id)
                        if (!(currentData.id && currentData.localImageUrl)) {
                            data.localImageUrl = url
                            this.listMap.set(data.id, data)
                        }
                    })
                })(item)
            })
            return res.map((item, idx) => {
                // item.localImageUrl = result[idx]
                if (!this.listMap.get(item.id)) {
                    this.listMap.set(item.id, item)
                }
            })
        }
        async regionchange(e) {
            if (e.type === 'end') {
                await this.getPositionAndUpdateMarkets()
                this.cover.show = false
            }
        }
        markertap(e) {
            const plant = this.listMap.get(e.markerId)
            const res = JSON.parse(plant.res)
            const result = Array.isArray(res.result) ? res.result : res.result ? [res.result] : []
            this.cover = {
                id: plant.id,
                show: true,
                url: plant.localImageUrl || plant.imgUrl,
                time: format(plant.created_at, 'MM-DD mm:ss'),
                name: result[0].name
            }
        }
        updateMarkers () {
            this.markers = Array.from(this.listMap.values()).reduce((arr, item) => {
                if (item.localImageUrl) {
                    arr.push({
                        iconPath: item.localImageUrl,
                        id: item.id,
                        latitude: item.latitude,
                        longitude: item.longitude,
                        width: 30,
                        height: 30
                    })
                }
                return arr
            }, [])
            this.$apply()
        }
        async controltap(e) {
            console.log(e.controlId)
        }
        async getBoundaryAndCenterLatitudeAdnLongitude () {
            const { southwest, northeast } = await this.getRegion()
            const boundary = (northeast.longitude - southwest.longitude) / 2
            const latitude = (northeast.latitude + southwest.latitude) / 2
            const longitude = (northeast.longitude + southwest.longitude) / 2
            return { boundary, latitude, longitude }
        }
        async onLoad () {
            // 使用 wx.createMapContext 获取 map 上下文
            this.mapCtx = wepy.createMapContext('map')
            const locationRes = await this.getLocation()
            this.longitude = locationRes.longitude
            this.latitude = locationRes.latitude
            this.updateMarkers()
            const { longitude, latitude, boundary } = await this.getBoundaryAndCenterLatitudeAdnLongitude()
            await this.getList({ longitude: longitude, latitude: latitude, boundary: boundary || this.boundary })
            this.updateMarkers()
            this.$apply()
            // 3秒更新markers
            setInterval(() => {
                this.updateMarkers()
            }, 3000)
        }
    }
</script>

<style lang="scss" scoped>
    .content {
        height: 100%;
        width: 100%;
        .cover-bg {
            height: 100%;
            width: 100%;
            background: rgba(225, 225, 225, 0.95);
            text-align: center;
            display: flex;
            flex-direction: column;
        }
        .cover {
            background-color: #ffffff;
            text-align: center;
            width: 440rpx;
            height: 620rpx;
            margin:200rpx auto 0;
            border-radius: 30rpx;
            .img {
                display: inline-block;
                width: 440rpx;
                height: 500rpx;
            }
            .description {
                padding: 10rpx 30rpx;
                font-size: 14px;
                color: #b1b1b1;
                cover-view {
                    line-height: 50rpx;
                    height: 50rpx;
                }
                .row {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                }
                .name, .more {
                    color: #737373;
                    display: inline-block;
                }
                .more {
                    display: flex;
                    align-items: center;
                    cover-view {
                        display: inline-block;
                    }
                    .icon-enter {
                        font-size: 30rpx;
                    }
                }
                .name {
                    font-size: 16px;
                    font-weight: bold;
                    text-align: center;
                }
            }
        }
        .line {
            width: 6rpx;
            height: 60rpx;
            margin:0 auto;
            background-color: #fff;
        }
        .cancel {
            position:relative;
            left:50%;
            margin-left:-50rpx;
            margin-top:-10rpx;
            height: 100rpx;
            width:100rpx;
        }
        .start {
            position: absolute;
            left: 0;
            bottom: 0;
            right: 0;
            height: 100rpx;
            text-align: center;
            line-height: 100rpx;
            background-color: #333333;
            color: #fff;
            font-size: 20px;
            font-weight: blod;
        }
    }
</style>
